package main

import "fmt"

func main() {
	// scoresIELTS := []float64{4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0}
	// loop(scoresIELTS)

	// scoresTOEFL := [][2]int{{0, 31}, {32, 34}, {35, 45}, {46, 59}, {60, 78}, {79, 93}, {94, 101}, {102, 109}, {110, 114}, {115, 117}, {118, 120}}
	// loop(scoresTOEFL)

	// printSlice(intSlice)
	// printSlice(stringSlice)

	/*
		intSlice := []Interfac{4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0}
		stringSlice := [][]Interfac{{0, 31}, {32, 34}, {35, 45}, {46, 59}, {60, 78}, {79, 93}, {94, 101}, {102, 109}, {110, 114}, {115, 117}, {118, 120}}

		newAnyType := &AnyType{}

		newAnyType.printSlice(intSlice)
		newAnyType.printSlice(stringSlice)
	*/

	// newGenericT := &GenericT[T]{}

	intSlice2 := &Generic{liste: []interface{}{4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0}}
	intSlice2.printSlice2()

	stringSlice2 := &Generic{liste: []interface{}{[]interface{}{0, 31}, []interface{}{32, 34}, []interface{}{35, 45}, []interface{}{46, 59}, []interface{}{60, 78}, []interface{}{79, 93}, []interface{}{94, 101}, []interface{}{102, 109}, []interface{}{110, 114}, []interface{}{115, 117}, []interface{}{118, 120}}}
	stringSlice2.printSlice2()
}

// func loop(liste interface{}) {
// 	switch v := liste.(type) {
// 	case []float64:
// 		for _, score := range v {
// 			fmt.Println(score)
// 		}
// 	case [][2]int:
// 		for _, score := range v {
// 			fmt.Println(score)
// 		}
// 	default:
// 		fmt.Println("Invalid data type")
// 	}
// }

// ----------------------------------------------------------------------------

type Interfac interface {
}

type AnyType struct {
	liste1 []Interfac
	liste2 [][]Interfac
}

func (a *AnyType) printSlice(slice interface{}) {
	switch v := slice.(type) {
	case []Interfac:
		slice = a.liste1
		for _, item := range v {
			fmt.Println(item)
		}
	case [][]Interfac:
		slice = a.liste2
		for _, item := range v {
			fmt.Println(item)
		}
	default:
		fmt.Println("Invalid data type")
	}
}

type GenericT[T Interfac] struct {
	liste []T
}

func (t *GenericT[T]) printSlice(slice []T) {
	slice = t.liste
	for _, item := range slice {
		fmt.Println(item)
	}
}

type Generic struct {
	liste []interface{}
}

func (t *Generic) printSlice2() {
	for _, item := range t.liste {
		fmt.Println(item)
	}
}
